"""Tools for using SLURM with FATMAN"""

from io import BufferedIOBase

DEFAULT_TEMPLATE = """#!/bin/bash -l
#
# ----- SLURM JOB SUBMIT SCRIPT -----
#SBATCH --export=ALL
#SBATCH --error=slurm.err
#SBATCH --output=slurm.out
#SBATCH --exclusive
#SBATCH --job-name={{ name | shell_quote }}
{%- if sbatch_args %}
{%- for arg, value in sbatch_args.items() %}
#SBATCH --{{ arg }}={{ value | shell_quote }}
{%- endfor %}
{%- endif %}

# AUTOGENERATED by FATMAN for task {{ name }}

set -o errexit
set -o nounset
set -o pipefail

{%- if environment %}
{%- if environment.modules %}

module load {%- for module in environment.modules %} "{{module}}"{% endfor %}
{%- endif %}

{%- if environment.variables %}
{% for name, value in environment.variables.items() %}
export {{name}}={{value | shell_quote }}
{%- endfor %}
{%- endif %}
{%- endif %}

if [ ${OMP_NUM_THREADS} -gt 1 ]; then
    export SLURM_CPU_BIND="sockets"
fi

{%- for command in commands %}

srun \\
    --job-name="{{command.name}}" \\
    --output="{{command.name}}.out" \\
    --error="{{command.name}}.err" \\
    --bcast="/tmp/slurm_bcast_{{command.name}}" \\
    {%- if srun_args %}
    {%- for name, value in srun_args.items() %}
    --{{ name }}={{ value | shell_quote }} \\
    {%- endfor %}
    {%- endif %}
    {{ command.cmd }} {{ command.args | map('shell_quote') | join(' ') }}
{%- if command.ignore_returncode %} \\
    || true # ignore the return code
{%- endif %}
{%- endfor %}

exit 0

"""


def shell_quote_filter(value):
    """Jinja2 filter to put strings in quotation marks where needed"""
    # put all strings not starting with '-' (e.g. all non-options) in "..."
    if isinstance(value, str) and not value.startswith('-'):
        return '"{}"'.format(value)

    # stringify the rest and return as is
    return str(value)


def generate_slurm_batch_script(
        name, commands,
        environment=None,
        sbatch_args=None,
        srun_args=None,
        output=None,
        sbatch_template=DEFAULT_TEMPLATE):
    """Generate a SLURM batch script based on given data"""

    from jinja2 import Environment, DictLoader
    env = Environment(loader=DictLoader({'sbatch': sbatch_template}))
    env.filters['shell_quote'] = shell_quote_filter
    template = env.get_template('sbatch')

    if output:
        if isinstance(output, str):
            template.stream(
                name=name,
                commands=commands,
                environment=environment,
                sbatch_args=sbatch_args,
                srun_args=srun_args
                ).dump(output)

        elif isinstance(output, BufferedIOBase):
            # bytes-like object, need to encode
            template.stream(
                name=name,
                commands=commands,
                environment=environment,
                sbatch_args=sbatch_args,
                srun_args=srun_args
                ).dump(output, encoding='utf-8')
    else:
        return template.render(
            name=name,
            commands=commands,
            environment=environment,
            sbatch_args=sbatch_args,
            srun_args=srun_args
            )
