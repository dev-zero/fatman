#!/bin/bash -l
#

# ----- SLURM JOB SUBMIT SCRIPT -----
#SBATCH --export=ALL
#SBATCH --error=slurm.%J.err
#SBATCH --output=slurm.%J.out
#SBATCH --exclusive

################ CHANGE this section  (begin) ##########################
# -- job info --
#SBATCH --account=uzh1
#SBATCH --job-name={projectname}
#SBATCH --time={runtime}

# -- number of nodes --
#SBATCH --nodes=4               # of nodes            (default =  1)
#SBATCH --ntasks-per-node=36    # of MPI tasks/node   (default = 36)
#SBATCH --cpus-per-task=1       # of OMP threads/task (default =  1)
#SBATCH --ntasks-per-core=1     # HT (default = 1, HyperThreads = 2)

# -- the program and input file --
INP="pw.inp"
SCRATCHDIR='{scratchdir}'
INPDIR='{code_workdir}'
########################################################################



################ NOTHING to be changed here ############################
MAX_THREADS_PER_NODE=48 # PizDora maximum

# -- modules to load --
module load espresso/5.2.0

# -- definition: function to start a calculation --
slurm_startjob() {{
  NTASKS=${{SLURM_NTASKS}}
  pool=`echo "${{NTASKS}} / 2" | bc`

  echo ' --------------------------------------------------------------'
  echo ' |        --- COPYING TO SCRATCH ---                          |'
  echo ' --------------------------------------------------------------'le
  
  mkdir -p $SCRATCHDIR
  cp -r $INPDIR/* $SCRATCHDIR

  cd $SCRATCHDIR

  echo ' --------------------------------------------------------------'
  echo ' |        --- RUNNING JOB ---                                 |'
  echo ' --------------------------------------------------------------'

  export OMP_NUM_THREADS=${{SLURM_CPUS_PER_TASK}}
  if [ ${{OMP_NUM_THREADS}} -gt 1 ]; then
    export SLURM_CPU_BIND="sockets"
  fi

  /usr/bin/time -p srun \
    --bcast=/tmp/${{USER}} \
    --ntasks ${{SLURM_NTASKS}} \
    --ntasks-per-node ${{SLURM_NNODES}} \
    --cpus-per-task ${{OMP_NUM_THREADS}} \
    pw.x -npool ${{pool}} -i ${{INP}} > ${{INP}}.out

  retval=$?

  if [ ! -f "{workdir}/update_fatman.py" ] ; then
      cat >> "{workdir}/update_fatman.py" << EOF
#!/usr/bin/env python

import requests

sess = requests.Session()
sess.verify = False

EOF

  fi

  if [ $retval -eq 0 ]
  then
      echo 'No Error'
      en=`grep "!    total energy              =" ${{INP}}.out | awk '{{printf "%24.18f", $5 * 13.605697827758654}}'` 

      cp $SCRATCHDIR/*out $INPDIR
      bzip2 $INPDIR/pw.inp.out

      cat >> "{workdir}/update_fatman.py" << EOF
# {projectname}  correct `date`
req = sess.post('{results_url}', data={{'energy': $en, 'task_id': {id}}})
req.raise_for_status()
done_task = req.json()

with open('{output_file}', 'rb') as f:
  req = sess.post('{server}' + done_task["_links"]["self"]+'/file', files={{'file': f}})
  req.raise_for_status()

req = sess.patch('{server}' + '{taskupdate}', data={{'status': 'done'}})
req.raise_for_status()
EOF
  else
      echo 'encountered an error'
      cat >> "{workdir}/update_fatman.py" << EOF
# {projectname}   `date`
req = sess.patch('{server}' + '{taskupdate}', data={{'status': 'error'}})
req.raise_for_status()
EOF
  fi

  echo ' --------------------------------------------------------------'
  echo ' |        --- DONE ---                                        |'
  echo ' --------------------------------------------------------------'
}}

# -- start the calculation --
slurm_startjob

exit 0
